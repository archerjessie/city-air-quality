{"version":3,"sources":["serviceWorker.js","utils/withState.js","api/airQualityAPI.js","common/simpleForm/SimpleForm.jsx","common/citySearchSideBar/cityLocationButton/CityLocationButton.jsx","common/citySearchSideBar/CitySearchSideBar.jsx","pages/airQualityPage/airQualityDashboard/locationPanel/LocationPanel.jsx","pages/airQualityPage/airQualityDashboard/AirQualityDashboard.jsx","pages/airQualityPage/AirQualityPage.jsx","index.js"],"names":["Boolean","window","location","hostname","match","withState","name","setName","initialState","Component","factory","React","createFactory","props","set","value","state","setState","render","baseUrl","process","API_KEY","getFromUrl","url","callback","fetch","then","R","error","console","search","setSearch","onSubmit","className","event","preventDefault","type","placeholder","onChange","role","aria-label","uid","onClick","selected","setSelected","useEffect","onLocationSelected","onRefreshData","searchData","setSearchData","fetchCity","map","station","key","LocationPanel","feed","city","geo","aqi","attributions","href","AirQualityDashboard","feeds","idx","setFeeds","addFeed","class","log","updatedFeedList","filter","removeFeed","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.39818939.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable react/destructuring-assignment */\nimport React from 'react';\n\nconst withState = (name, setName, initialState) => (Component) => {\n  const factory = React.createFactory(Component);\n  class WithState extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = { [name]: initialState };\n    }\n\n      set = (value) => (this.state[name] !== value\n        ? (this.setState({ [name]: value }), true)\n        : false)\n\n      render = () => factory({ ...this.props, ...this.state, [setName]: this.set })\n  }\n  return WithState;\n};\n\nexport default withState;\n","import * as R from 'ramda';\n\nconst baseUrl = process.env.REACT_APP_API_URL\nconst API_KEY = process.env.REACT_APP_API_KEY\n\nexport function fetchCity(search, callback) {\n    getFromUrl(`${baseUrl}search/?keyword=${search}&token=${API_KEY}`, callback)\n}\n\nexport function fetchAirQuality(city, callback) {\n    getFromUrl(`${baseUrl}feed/@${city}/?token=${API_KEY}`, callback)\n}\n\nexport function getFromUrl(url, callback) {\n    try {\n        fetch(url)\n            .then(R.invoker(0, 'json'))\n            .then(R.prop('data'))\n            .then(callback)\n    } catch (error) {\n        console.error(error)\n    }\n}","import React from 'react'\nimport * as R from 'ramda';\nimport withState from '../../utils/withState';\n\nconst SimpleForm = ({ search, setSearch, onSubmit }) => (\n    <form\n        className=\"flex\"\n        onSubmit={(event) => {\n            event.preventDefault();\n            onSubmit(search);\n        }}>\n        <div className=\"w5 flex items-center\">\n            <input\n                type=\"text\"\n                value={search}\n                placeholder=\"Melbourne\"\n                onChange={R.compose(setSearch, R.prop('value'), R.prop('target'))}\n                className=\"br1 br--top br--left ba b--light-gray ph3 pv2 flex-grow-1 flex-shrink-1\"\n            />\n            <button\n                type=\"submit\"\n                className=\"br1 bl-0 br--top br--right b--light-gray white pa2 right-0 flex-grow-0 flex-shrink-0\"\n            >\n                <span role=\"img\" aria-label=\"search\">\n                    🕵️\n              </span>\n            </button>\n        </div>\n    </form>\n)\nexport default R.compose(\n    withState('search', 'setSearch', ''),\n)(SimpleForm);","import React, { useEffect } from 'react';\nimport * as R from 'ramda';\nimport withState from '../../../utils/withState';\n\nconst CityLocationButton = ({ uid, name, onClick, selected, setSelected }) => {\n    const onButtonClicked = (event) => {\n        setSelected(!selected)\n    }\n\n    useEffect(() => { onClick(uid, selected) }, [selected]);\n\n    return (\n        <button\n            className={`pv2 ph3 flex-grow-0 flex-shrink-0 ba-0 tl w-100 border-box ${selected ? '' : 'b--white'}`}\n            onClick={onButtonClicked}>\n            {name}\n        </button>\n    )\n}\nexport default R.compose(\n    withState('selected', 'setSelected', false),\n\n)(CityLocationButton);","import React from 'react';\nimport SimpleForm from '../simpleForm/SimpleForm';\nimport { fetchCity } from '../../api/airQualityAPI';\nimport * as R from 'ramda';\nimport withState from '../../utils/withState';\nimport CityLocationButton from './cityLocationButton/CityLocationButton';\n\nimport './citySearchSideBar.css';\n\nconst CitySearchSideBar = ({\n    onLocationSelected,\n    onRefreshData,\n    searchData,\n    setSearchData }) => {\n    const onSearchCity = (search) => {\n        onRefreshData();\n        fetchCity(search, setSearchData);\n    }\n\n    return (\n        <div className='city-search-sidebar'>\n            <SimpleForm onSubmit={onSearchCity} />\n            <div className=\"br1 br--bottom flex flex-column w5 bb bl br b--light-gray border-box\">\n                {searchData ? (\n                    <div className=\"pv2\">\n                        {searchData.map(({ uid, station: { name } }) => (\n                            <CityLocationButton key={uid} onClick={onLocationSelected} name={name} uid={uid} />\n                        ))}\n                    </div>\n                ) : (\n                        <div className=\"ph3 pv2 silver h4 flex items-center justify-center\">\n                            Search for a city\n                        </div>\n                    )}\n            </div>\n        </div>\n    )\n}\nexport default R.compose(\n    withState('searchData', 'setSearchData', null),\n)(CitySearchSideBar);","import React from 'react'\nimport './locationPanel.css'\n\nconst LocationPanel = ({ feed }) => (\n    <div className=\"location-panel ba b--gray br1 ml5 mb5 w-30\">\n        <div className=\"pv2 ph3 flex justify-between\">\n            {feed.city.name}\n            <div>\n                (\n                {feed.city.geo[0]}\n                ,\n                {' '}\n                {feed.city.geo[1]}\n            )\n            </div>\n        </div>\n        <div className=\"h4 pv2 ph3 flex justify-center items-center f1\">\n            {feed.aqi}\n        </div>\n        <div className=\"f7 pv2\">\n            {feed.attributions.map(({ url, name }) => (\n                <div key={url} className=\"flex justify-between pv1 ph3\">\n                    <div>{name}</div>\n                    <a className=\"blue pl3\" href={url}>{url}</a>\n                </div>\n            ))}\n        </div>\n    </div>\n)\nexport default LocationPanel;\n","import React from 'react';\nimport LocationPanel from './locationPanel/LocationPanel';\n\nimport './airQualityDashboard.css';\n\nconst AirQualityDashboard = ({ feeds }) => (\n    <div className=\"air-quality-dashboard flex flex-wrap justify-around\">\n        {feeds.map((feed) => (\n            <LocationPanel key={feed.idx} feed={feed} />\n        ))}\n    </div>\n)\nexport default AirQualityDashboard;\n","import React from 'react';\nimport * as R from 'ramda';\nimport 'tachyons';\nimport withState from '../../utils/withState';\nimport { fetchAirQuality } from '../../api/airQualityAPI';\nimport CitySearchSideBar from '../../common/citySearchSideBar/CitySearchSideBar';\nimport AirQualityDashboard from '../airQualityPage/airQualityDashboard/AirQualityDashboard';\n\nconst AirQualityPage = ({\n    feeds, setFeeds,\n}) => {\n    const addFeed = (feed) => {\n        setFeeds([feed, ...feeds]);\n    }\n    const removeFeed = (uid) => {\n        const updatedFeedList = feeds.filter(feed => feed.idx !== uid);\n        setFeeds(updatedFeedList);\n    }\n\n    const onLocationSelected = (uid, selected) => {\n        console.log(uid)\n        if (selected) {\n            fetchAirQuality(uid, addFeed)\n        }\n        else {\n            removeFeed(uid);\n        }\n    }\n\n    const onNewSearch = () => setFeeds([]);\n\n    return (\n        // eslint-disable-next-line react/jsx-filename-extension\n        <div className=\"flex flex-column\">\n            <header className=\"f2 pv3 ph4 bg-light-purple white flex-grow-0 flex-shrink-0\">\n                Air Quality Index\n            </header>\n            <div className=\"cf pa5 flex-grow-1 flex-shrink-0 flex items-start\">\n                <div class=\"fl w-28 tc\">\n                    <CitySearchSideBar onLocationSelected={onLocationSelected} onRefreshData={onNewSearch} />\n                </div>\n                <div class=\"fl w-72 tc\">\n                    <AirQualityDashboard feeds={feeds} />\n                </div>\n            </div>\n        </div>)\n}\n\nexport default R.compose(\n    withState('feeds', 'setFeeds', [])\n)(AirQualityPage);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport AirQualityPage from './pages/airQualityPage/AirQualityPage';\n\n// eslint-disable-next-line react/jsx-filename-extension\nReactDOM.render(<AirQualityPage />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}